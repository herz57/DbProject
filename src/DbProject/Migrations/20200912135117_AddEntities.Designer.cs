// <auto-generated />
using System;
using DbProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200912135117_AddEntities")]
    partial class AddEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DbProject.Data.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAT_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CAT_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("CAT_CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("CAT_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CAT_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnName("CAT_UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("tblCategory");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUS_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName")
                        .HasColumnName("CUS_ContactName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactPhone")
                        .HasColumnName("CUS_ContactPhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CUS_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("CUS_Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnName("CUS_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("CUS_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactName");

                    b.HasIndex("ContactPhone");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("tblCustomer");
                });

            modelBuilder.Entity("DbProject.Data.Domain.DeliveryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELDET_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DELDET_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .HasColumnName("DELDET_Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mobile")
                        .HasColumnName("DELDET_Mobile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnName("DELDET_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnName("DELDET_Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("DELDET_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Mobile");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.ToTable("tblDeliveryDetail");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INV_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("INV_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("LastForDigit")
                        .HasColumnName("INV_LastForDigit")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameOnCard")
                        .HasColumnName("INV_NameOnCard")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnName("INV_ORD_Id")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnName("INV_PaymentId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnName("INV_Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("INV_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("LastForDigit");

                    b.HasIndex("NameOnCard");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("Price");

                    b.ToTable("tblInvoice");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Logging.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUDLOG_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnName("AUDLOG_Action")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUDLOG_CreateDate")
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("AUDLOG_CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .HasColumnName("AUDLOG_TableName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnName("AUDLOG_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnName("AUDLOG_UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("TableName");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("tblAuditLog");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Logging.AuditLogDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUDLOGDET_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditLogId")
                        .HasColumnName("AUDLOGDET_AUDLOG_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUDLOGDET_CreateDate")
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.Property<string>("FieldName")
                        .HasColumnName("AUDLOGDET_FieldName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnUpdate()
                        .HasColumnName("AUDLOGDET_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.Property<string>("ValueFrom")
                        .HasColumnName("AUDLOGDET_ValueFrom")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ValueTo")
                        .HasColumnName("AUDLOGDET_ValueTo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("FieldName");

                    b.HasIndex("ValueFrom");

                    b.HasIndex("ValueTo");

                    b.ToTable("tblAuditLogDetail");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORD_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORD_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("Currency")
                        .HasColumnName("ORD_Currency")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnName("ORD_CUS_Id")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryDetailId")
                        .HasColumnName("ORD_DELDET_Id")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnName("ORD_ORDSTAT_Id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnName("ORD_Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("ORD_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryDetailId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("Price");

                    b.ToTable("tblOrder");
                });

            modelBuilder.Entity("DbProject.Data.Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDITEM_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDITEM_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("OrderId")
                        .HasColumnName("ORDITEM_ORD_Id")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("ORDITEM_PROD_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnName("ORDITEM_Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("ORDITEM_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Quantity");

                    b.ToTable("tblOrderItem");
                });

            modelBuilder.Entity("DbProject.Data.Domain.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDSTAT_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ORDSTAT_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("ORDSTAT_CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("ORDSTAT_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("ORDSTAT_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnName("ORDSTAT_UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("tblOrderStatus");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROD_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("PROD_CAT_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PROD_CreateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("CreateUserId")
                        .HasColumnName("PROD_CreateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("PROD_Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnName("PROD_Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("PROD_UpdateDate")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnName("PROD_UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("tblProduct");
                });

            modelBuilder.Entity("DbProject.Data.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("USER_Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnName("USER_Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Mobile")
                        .HasColumnName("USER_Mobile")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .HasColumnName("USER_Phone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnName("USER_UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Mobile");

                    b.HasIndex("Phone");

                    b.HasIndex("UserName");

                    b.ToTable("tblUser");
                });

            modelBuilder.Entity("DbProject.Data.Domain.Category", b =>
                {
                    b.HasOne("DbProject.Data.Domain.User", "CreateUser")
                        .WithMany("CreatedCategories")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "UpdateUser")
                        .WithMany("UpdatedCategories")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.Customer", b =>
                {
                    b.HasOne("DbProject.Data.Domain.User", "CreateUser")
                        .WithMany("CreatedCustomers")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "UpdateUser")
                        .WithMany("UpdatedCustomers")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("DbProject.Data.Domain.General.Address", "Address", b1 =>
                        {
                            b1.Property<int>("CustomerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .HasColumnName("CUS_Address1")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address2")
                                .HasColumnName("CUS_Address2")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .HasColumnName("CUS_City")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Country")
                                .HasColumnName("CUS_Country")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("County")
                                .HasColumnName("CUS_County")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PostCode")
                                .HasColumnName("CUS_PostCode")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("CustomerId");

                            b1.HasIndex("Address1");

                            b1.HasIndex("Address2");

                            b1.HasIndex("City");

                            b1.HasIndex("Country");

                            b1.HasIndex("County");

                            b1.HasIndex("PostCode");

                            b1.ToTable("tblCustomer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });
                });

            modelBuilder.Entity("DbProject.Data.Domain.DeliveryDetail", b =>
                {
                    b.OwnsOne("DbProject.Data.Domain.General.Address", "Address", b1 =>
                        {
                            b1.Property<int>("DeliveryDetailId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .HasColumnName("DELDET_Address1")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Address2")
                                .HasColumnName("DELDET_Address2")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .HasColumnName("DELDET_City")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Country")
                                .HasColumnName("DELDET_Country")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("County")
                                .HasColumnName("DELDET_County")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("PostCode")
                                .HasColumnName("DELDET_PostCode")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("DeliveryDetailId");

                            b1.HasIndex("Address1");

                            b1.HasIndex("Address2");

                            b1.HasIndex("City");

                            b1.HasIndex("Country");

                            b1.HasIndex("County");

                            b1.HasIndex("PostCode");

                            b1.ToTable("tblDeliveryDetail");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryDetailId");
                        });
                });

            modelBuilder.Entity("DbProject.Data.Domain.Invoice", b =>
                {
                    b.HasOne("DbProject.Data.Domain.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.Logging.AuditLog", b =>
                {
                    b.HasOne("DbProject.Data.Domain.User", "CreateUser")
                        .WithMany("CreatedAuditLogs")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "UpdateUser")
                        .WithMany("UpdatedAuditLogs")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.Logging.AuditLogDetail", b =>
                {
                    b.HasOne("DbProject.Data.Domain.Logging.AuditLog", "AuditLog")
                        .WithMany("AuditLogDetails")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.Order", b =>
                {
                    b.HasOne("DbProject.Data.Domain.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.DeliveryDetail", "DeliveryDetail")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.OrderItem", b =>
                {
                    b.HasOne("DbProject.Data.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.OrderStatus", b =>
                {
                    b.HasOne("DbProject.Data.Domain.User", "CreateUser")
                        .WithMany("CreatedOrderStatuses")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "UpdateUser")
                        .WithMany("UpdatedOrderStatuses")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DbProject.Data.Domain.Product", b =>
                {
                    b.HasOne("DbProject.Data.Domain.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "CreateUser")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DbProject.Data.Domain.User", "UpdateUser")
                        .WithMany("UpdatedProducts")
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
